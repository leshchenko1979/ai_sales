import asyncio
import logging
import random
from datetime import datetime

from db.queries import AccountQueries

from .client import AccountClient
from .models import Account
from .notifications import AccountNotifier

logger = logging.getLogger(__name__)


class AccountWarmup:
    def __init__(self, db):
        self.db = db
        self.queries = AccountQueries(db)
        self.notifier = AccountNotifier()
        self._warmup_actions = [
            self._join_channels,
            self._update_profile,
            self._send_messages_to_self,
            self._read_channels,
        ]

    async def warmup_account(self, account: Account) -> bool:
        """–ü—Ä–æ–≥—Ä–µ–≤ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            logger.info(f"Starting warmup for account {account.phone}")

            client = AccountClient(account)
            if not await client.connect():
                return False

            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞
                actions = random.sample(self._warmup_actions, k=2)
                for action in actions:
                    if not await action(client):
                        return False
                    # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                    await asyncio.sleep(random.randint(30, 120))

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
                await self.db.queries.update_account_warmup_time(account.id)
                return True

            finally:
                await client.disconnect()

        except Exception as e:
            logger.error(
                f"Error warming up account {account.phone}: {e}", exc_info=True
            )
            return False

    async def warmup_new_accounts(self) -> dict:
        """–ü—Ä–æ–≥—Ä–µ–≤ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        stats = {"total": 0, "success": 0, "failed": 0}

        try:
            # Get accounts for warmup using self.queries
            accounts = await self.queries.get_accounts_for_warmup()
            stats["total"] = len(accounts)

            for account in accounts:
                try:
                    if await self.warmup_account(account):
                        stats["success"] += 1
                    else:
                        stats["failed"] += 1
                except Exception as e:
                    logger.error(
                        f"Failed to warmup account {account.phone}: {e}", exc_info=True
                    )
                    stats["failed"] += 1

            # Send report
            await self._notify_warmup_results(stats)
            return stats

        except Exception as e:
            logger.error(f"Error during warmup: {e}", exc_info=True)
            return stats

    async def _join_channels(self, client: AccountClient) -> bool:
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª–∞–º"""
        channels = [
            "telegram",
            "durov",
            "tginfo",
            "cryptocurrency",
            "bitcoin",
            "trading",
        ]
        try:
            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ 2-3 —Å–ª—É—á–∞–π–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º
            selected = random.sample(channels, k=random.randint(2, 3))
            for channel in selected:
                await client.client.join_chat(channel)
                await asyncio.sleep(random.randint(60, 180))
            return True
        except Exception as e:
            logger.error(f"Error joining channels: {e}", exc_info=True)
            return False

    async def _update_profile(self, client: AccountClient) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –∏ –±–∏–æ
            first_names = ["Alex", "Michael", "John", "David", "Robert"]
            last_names = ["Smith", "Johnson", "Williams", "Brown", "Jones"]
            bios = [
                "Crypto enthusiast",
                "Investor",
                "Trading professional",
                "Financial analyst",
                "Business developer",
            ]

            await client.client.update_profile(
                first_name=random.choice(first_names),
                last_name=random.choice(last_names),
                bio=random.choice(bios),
            )
            return True
        except Exception as e:
            logger.error(f"Error updating profile: {e}", exc_info=True)
            return False

    async def _send_messages_to_self(self, client: AccountClient) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–∞–º–æ–º—É —Å–µ–±–µ"""
        try:
            await client.client.get_me()
            messages = [
                "Investment notes",
                "Market analysis",
                "Trading strategy",
                "Portfolio update",
                "Research materials",
            ]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 2-3 —Å–æ–æ–±—â–µ–Ω–∏—è
            for _ in range(random.randint(2, 3)):
                await client.client.send_message("me", random.choice(messages))
                await asyncio.sleep(random.randint(30, 90))
            return True
        except Exception as e:
            logger.error(f"Error sending self messages: {e}", exc_info=True)
            return False

    async def _read_channels(self, client: AccountClient) -> bool:
        """–ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–∞—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            async for dialog in client.client.get_dialogs():
                if dialog.chat.type in ["channel", "supergroup"]:
                    # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    async for message in client.client.get_chat_history(
                        dialog.chat.id, limit=10
                    ):
                        await client.client.read_chat_history(
                            dialog.chat.id, message.id
                        )
                        await asyncio.sleep(random.randint(5, 15))
                    break  # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª
            return True
        except Exception as e:
            logger.error(f"Error reading channels: {e}", exc_info=True)
            return False

    async def _notify_warmup_results(self, stats: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—Ä–æ–≥—Ä–µ–≤–∞"""
        message = (
            "üî• –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
            f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {stats['total']}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {stats['success']}\n"
            f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {stats['failed']}\n\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        await self.notifier._send_notification(message)
