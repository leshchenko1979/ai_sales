import logging
from datetime import datetime

from bot.client import app
from config import ADMIN_TELEGRAM_ID

from .models import Account

logger = logging.getLogger(__name__)


class AccountNotifier:
    def __init__(self):
        self.admin_id = ADMIN_TELEGRAM_ID
        self._bot = app
        self._last_notification = {}  # account_id -> last_notification_time

    async def notify_blocked(self, account: Account, reason: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if not await self._should_notify(account.id, "blocked"):
            return

        message = (
            "‚õîÔ∏è –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {account.phone}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

        await self._send_notification(message)
        self._update_notification_time(account.id, "blocked")

    async def notify_disabled(self, account: Account, reason: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if not await self._should_notify(account.id, "disabled"):
            return

        message = (
            "üî¥ –ê–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω\n\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {account.phone}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

        await self._send_notification(message)
        self._update_notification_time(account.id, "disabled")

    async def notify_limit_reached(self, account: Account):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not await self._should_notify(account.id, "limit"):
            return

        message = (
            "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {account.phone}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–π: {account.daily_messages}\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

        await self._send_notification(message)
        self._update_notification_time(account.id, "limit")

    async def notify_status_report(self, stats: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        message = (
            "üìä –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
            f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {stats['total']}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã: {stats['active']}\n"
            f"üî¥ –û—Ç–∫–ª—é—á–µ–Ω—ã: {stats['disabled']}\n"
            f"‚õîÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {stats['blocked']}\n\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

        await self._send_notification(message)

    async def _should_notify(self, account_id: int, notification_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        key = f"{account_id}_{notification_type}"
        last_time = self._last_notification.get(key)

        if not last_time:
            return True

        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ —á–∞—Å
        return (datetime.now() - last_time).total_seconds() >= 3600

    def _update_notification_time(self, account_id: int, notification_type: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        key = f"{account_id}_{notification_type}"
        self._last_notification[key] = datetime.now()

    async def send_notification(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            await app.send_message(self.admin_id, message)
        except Exception as e:
            logger.error(f"Failed to send notification: {e}")
