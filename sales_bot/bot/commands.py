import logging
from datetime import datetime

from accounts.manager import AccountManager
from accounts.monitoring import AccountMonitor
from config import ADMIN_TELEGRAM_ID
from db.queries import DialogQueries, get_db
from pyrogram import Client
from pyrogram.filters import command
from pyrogram.types import Message as PyrogramMessage
from utils.export import export_all_dialogs, export_dialog

from .client import app

# Command response messages
UNAUTHORIZED_MSG = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
ERROR_MSG = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã."
INVALID_FORMAT_MSG = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã."

# Status emojis
STATUS_EMOJIS = {"active": "üü¢", "disabled": "üî¥", "blocked": "‚õî", "unknown": "‚ùì"}

logger = logging.getLogger(__name__)


async def check_admin(message: PyrogramMessage) -> bool:
    """Check admin rights"""
    if message.from_user.id != ADMIN_TELEGRAM_ID:
        await message.reply_text(UNAUTHORIZED_MSG)
        logger.warning(
            f"Unauthorized access attempt from user {message.from_user.id} "
            f"at {datetime.now().isoformat(timespec='microseconds')}"
        )
        return False
    return True


def admin(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""

    async def wrapper(client: Client, message: PyrogramMessage):
        if not await check_admin(message):
            return
        logger.info(f"Command {message.text} executed by admin {message.from_user.id}")
        return await func(client, message)

    return wrapper


@app.on_message(command("start"))
@admin
async def start_command(client: Client, message: PyrogramMessage):
    """Handler for /start @username command"""
    try:
        args = message.text.split()
        if len(args) != 2 or not args[1].startswith("@"):
            await message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /start @username")
            return

        username = args[1][1:]  # Remove @ from start
        async with get_db() as session:
            dialog_queries = DialogQueries(session)
            dialog = await dialog_queries.create_dialog(username, message.from_user.id)

        await message.reply_text(
            f"–î–∏–∞–ª–æ–≥ {dialog.id} —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{username} –Ω–∞—á–∞—Ç."
        )
        logger.info(f"Started dialog {dialog.id} with @{username}")

    except Exception as e:
        logger.error(
            f"Error in start_command: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply_text(ERROR_MSG)


@app.on_message(command("stop"))
@admin
async def stop_command(client: Client, message: PyrogramMessage):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop N"""
    try:
        args = message.text.split()
        if len(args) != 2 or not args[1].isdigit():
            await message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stop N, –≥–¥–µ N - –Ω–æ–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞")
            return

        dialog_id = int(args[1])
        async with get_db() as session:
            dialog_queries = DialogQueries(session)
            dialog = await dialog_queries.get_dialog(dialog_id)

            if not dialog:
                await message.reply_text(f"–î–∏–∞–ª–æ–≥ {dialog_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            dialog.status = "stopped"
            await session.commit()

        await message.reply_text(f"–î–∏–∞–ª–æ–≥ {dialog_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        logger.info(f"Stopped dialog {dialog_id}")

    except Exception as e:
        logger.error(
            f"Error in stop_command: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply_text(ERROR_MSG)


@app.on_message(command("list"))
@admin
async def list_command(client: Client, message: PyrogramMessage):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list"""
    try:
        async with get_db() as session:
            dialog_queries = DialogQueries(session)
            dialogs = await dialog_queries.get_active_dialogs()

            if not dialogs:
                await message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.")
                return

            response = "–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏:\n"
            for dialog in dialogs:
                response += f"ID: {dialog.id} - @{dialog.target_username}\n"

        await message.reply_text(response)

    except Exception as e:
        logger.error(
            f"Error in list_command: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply_text(ERROR_MSG)


@app.on_message(command("view"))
@admin
async def view_command(client: Client, message: PyrogramMessage):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /view N"""
    try:
        args = message.text.split()
        if len(args) != 2 or not args[1].isdigit():
            await message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /view N, –≥–¥–µ N - –Ω–æ–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞")
            return

        dialog_id = int(args[1])
        async with get_db() as session:
            dialog_queries = DialogQueries(session)
            messages = await dialog_queries.get_messages(dialog_id)

            if not messages:
                await message.reply_text(
                    f"–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ {dialog_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                )
                return

            response = f"–î–∏–∞–ª–æ–≥ {dialog_id}:\n\n"
            for msg in messages:
                direction = "‚Üí" if msg.direction == "out" else "‚Üê"
                response += f"{direction} {msg.content}\n"

        await message.reply_text(response)

    except Exception as e:
        logger.error(
            f"Error in view_command: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply_text(ERROR_MSG)


@app.on_message(command("export"))
@admin
async def export_command(client: Client, message: PyrogramMessage):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export N"""
    try:
        args = message.text.split()
        if len(args) != 2 or not args[1].isdigit():
            await message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /export N, –≥–¥–µ N - –Ω–æ–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞")
            return

        dialog_id = int(args[1])
        file_path = await export_dialog(dialog_id)

        if file_path:
            with open(file_path, "rb") as file:
                await message.reply_document(file)
        else:
            await message.reply_text("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.")

    except Exception as e:
        logger.error(
            f"Error in export_command: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply_text(ERROR_MSG)


@app.on_message(command("export_all"))
@admin
async def export_all_command(client: Client, message: PyrogramMessage):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export_all"""
    try:
        file_path = await export_all_dialogs()

        if file_path:
            with open(file_path, "rb") as file:
                await message.reply_document(file)
        else:
            await message.reply_text("–ù–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")

    except Exception as e:
        logger.error(
            f"Error in export_all_command: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply_text(ERROR_MSG)


@app.on_message(command("help"))
@admin
async def help_command(client: Client, message: PyrogramMessage):
    """Handler for /help command"""
    try:
        help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞–º–∏:
/start @username - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
/stop N - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–æ–º–µ—Ä N
/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤

–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –≤—ã–≥—Ä—É–∑–∫–∞:
/view N - –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–∞ –Ω–æ–º–µ—Ä N
/export N - –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –Ω–æ–º–µ—Ä N –≤ —Ñ–∞–π–ª
/export_all - –≤—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:
/add_account phone - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
/authorize phone code - –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/list_accounts - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
/disable_account phone - –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/check_account phone - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
/check_all_accounts - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã

–ü–æ–º–æ—â—å:
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
"""
        await message.reply_text(help_text)
        logger.info("Help command executed")

    except Exception as e:
        logger.error(
            f"Error in help_command: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply_text(ERROR_MSG)


@app.on_message(command("add_account"))
@admin
async def cmd_add_account(client: Client, message: PyrogramMessage):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        if len(args) != 2:
            await message.reply(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_account phone\n–ü—Ä–∏–º–µ—Ä: /add_account +79001234567"
            )
            return

        phone = args[1]

        # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        async with get_db() as session:
            account_manager = AccountManager(session)
            account = await account_manager.add_account(phone)

            if not account:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç.")
                return

            await message.reply(
                "–ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π:\n"
                f"/authorize {phone} –∫–æ–¥"
            )

    except Exception as e:
        logger.error(
            f"Error in cmd_add_account: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply(ERROR_MSG)


@app.on_message(command("authorize"))
@admin
async def cmd_authorize(client: Client, message: PyrogramMessage):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        if len(args) != 3:
            await message.reply(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /authorize phone code\n"
                "–ü—Ä–∏–º–µ—Ä: /authorize +79001234567 12345"
            )
            return

        phone, code = args[1], args[2]

        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
        async with get_db() as session:
            account_manager = AccountManager(session)
            success = await account_manager.authorize_account(phone, code)

            if success:
                await message.reply("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
            else:
                await message.reply(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )

    except Exception as e:
        logger.error(
            f"Error in cmd_authorize: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply(ERROR_MSG)


@app.on_message(command("list_accounts"))
@admin
async def cmd_list_accounts(client: Client, message: PyrogramMessage):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        async with get_db() as session:
            account_manager = AccountManager(session)
            accounts = await account_manager.queries.get_all_accounts()

            if not accounts:
                await message.reply("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
                return

            response = "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n\n"
            for acc in accounts:
                status_emoji = STATUS_EMOJIS.get(acc.status, STATUS_EMOJIS["unknown"])

                response += (
                    f"{status_emoji} {acc.phone}\n"
                    f"‚îú ID: {acc.id}\n"
                    f"‚îú –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {acc.daily_messages}\n"
                    f"‚îî –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {acc.last_used or '–Ω–∏–∫–æ–≥–¥–∞'}\n\n"
                )

            await message.reply(response)

    except Exception as e:
        logger.error(
            f"Error in cmd_list_accounts: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply(ERROR_MSG)


@app.on_message(command("disable_account"))
@admin
async def cmd_disable_account(client: Client, message: PyrogramMessage):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        if len(args) != 2:
            await message.reply(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /disable_account phone\n"
                "–ü—Ä–∏–º–µ—Ä: /disable_account +79001234567"
            )
            return

        phone = args[1]

        # –û—Ç–∫–ª—é—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        async with get_db() as session:
            account_manager = AccountManager(session)
            success = await account_manager.queries.update_account_status(
                phone, "disabled"
            )

            if success:
                await message.reply("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.")
            else:
                await message.reply(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
                )

    except Exception as e:
        logger.error(
            f"Error in cmd_disable_account: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply(ERROR_MSG)


@app.on_message(command("check_account"))
@admin
async def cmd_check_account(client: Client, message: PyrogramMessage):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.reply(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_account phone\n"
                "–ü—Ä–∏–º–µ—Ä: /check_account +79001234567"
            )
            return

        phone = args[1]

        async with get_db() as session:
            account_manager = AccountManager(session)
            account = await account_manager.queries.get_account_by_phone(phone)

            if not account:
                await message.reply("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            monitor = AccountMonitor(session)
            is_working = await monitor.check_account(account)

            status_emoji = "‚úÖ" if is_working else "‚ùå"
            await message.reply(
                f"{status_emoji} –ê–∫–∫–∞—É–Ω—Ç {phone}\n"
                f"–°—Ç–∞—Ç—É—Å: {account.status}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {account.daily_messages}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {account.last_used or '–Ω–∏–∫–æ–≥–¥–∞'}"
            )

    except Exception as e:
        logger.error(
            f"Error in cmd_check_account: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply(ERROR_MSG)


@app.on_message(command("check_all_accounts"))
@admin
async def cmd_check_all_accounts(client: Client, message: PyrogramMessage):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        async with get_db() as session:
            monitor = AccountMonitor(session)
            stats = await monitor.check_all_accounts()

            await message.reply(
                "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
                f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {stats['total']}\n"
                f"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: {stats['active']}\n"
                f"üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ: {stats['disabled']}\n"
                f"‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {stats['blocked']}"
            )

    except Exception as e:
        logger.error(
            f"Error in cmd_check_all_accounts: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply(ERROR_MSG)
