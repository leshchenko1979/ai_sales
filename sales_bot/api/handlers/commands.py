"""Bot command handlers."""

import logging
from functools import wraps
from typing import Callable, TypeVar

from core.accounts import AccountManager, AccountMonitor
from core.db import AccountQueries, DialogQueries, get_db, with_queries
from core.telegram.client import app
from infrastructure.config import ADMIN_TELEGRAM_ID
from pyrogram import Client
from pyrogram.filters import command
from pyrogram.types import Message as PyrogramMessage
from utils.export import export_all_dialogs, export_dialog

logger = logging.getLogger(__name__)

# Constants
ERROR_MSG = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
STATUS_EMOJIS = {
    "active": "‚úÖ",
    "disabled": "üî¥",
    "blocked": "‚õî",
    "unknown": "‚ùì",
}

T = TypeVar("T")


def admin(func: Callable[..., T]) -> Callable[..., T]:
    """Admin-only command decorator."""

    @wraps(func)
    async def wrapper(client: Client, message: PyrogramMessage, *args, **kwargs) -> T:
        if message.from_user.id != ADMIN_TELEGRAM_ID:
            await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
            return
        return await func(client, message, *args, **kwargs)

    return wrapper


def _normalize_phone(phone: str) -> str:
    """Normalize phone number to standard format."""
    return phone.strip().replace("+", "")


# Account Management Commands
@app.on_message(command(["account_add", "addacc"]))  # Added alias for convenience
@admin
async def cmd_add_account(client: Client, message: PyrogramMessage):
    """Add new Telegram account."""
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.reply(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /account_add phone\n" "–ü—Ä–∏–º–µ—Ä: /account_add 79001234567"
            )
            return

        phone = _normalize_phone(args[1])

        # Create account
        manager = AccountManager()
        account = await manager.get_or_create_account(phone)

        if not account:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç.")
            return

        # Request authorization code
        if await manager.request_code(phone):
            await message.reply(
                "–ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π:\n"
                f"/account_auth {phone} –∫–æ–¥"
            )
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")

    except Exception as e:
        logger.error(
            f"Error in cmd_add_account: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply(ERROR_MSG)


@app.on_message(command(["account_auth", "auth"]))  # Shorter alias
@admin
async def cmd_authorize(client: Client, message: PyrogramMessage):
    """Authorize Telegram account."""
    try:
        args = message.text.split()
        if len(args) != 3:
            await message.reply(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /account_auth phone code\n"
                "–ü—Ä–∏–º–µ—Ä: /account_auth 79001234567 12345"
            )
            return

        phone = _normalize_phone(args[1])
        code = args[2]

        # Authorize account
        manager = AccountManager()
        success = await manager.authorize_account(phone, code)

        if success:
            await message.reply("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
        else:
            await message.reply(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )

    except Exception as e:
        logger.error(
            f"Error in cmd_authorize: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply(ERROR_MSG)


@app.on_message(command(["account_list", "accounts"]))
@admin
@with_queries(AccountQueries)
async def cmd_list_accounts(
    client: Client, message: PyrogramMessage, queries: AccountQueries
):
    """List all registered accounts and their status."""
    try:
        # Get all accounts
        accounts = await queries.get_all_accounts()
        if not accounts:
            await message.reply("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
            return

        # Prepare statistics
        stats = {
            "total": len(accounts),
            "active": 0,
            "disabled": 0,
            "blocked": 0,
            "flood_wait": 0,
        }

        # Prepare account list
        account_list = []
        for account in accounts:
            # Update statistics
            stats[account.status.value] += 1
            if account.is_flood_wait:
                stats["flood_wait"] += 1

            # Add to list
            status_emoji = STATUS_EMOJIS.get(
                account.status.value, STATUS_EMOJIS["unknown"]
            )
            account_list.append(
                f"{status_emoji} {account.phone} - {account.status.value}"
                + (" (flood wait)" if account.is_flood_wait else "")
            )

        # Prepare message
        message_text = "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n\n"
        message_text += "\n".join(account_list)
        message_text += f"\n\n–í—Å–µ–≥–æ: {stats['total']}"
        message_text += f"\n–ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}"
        message_text += f"\n–û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {stats['disabled']}"
        message_text += f"\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['blocked']}"
        message_text += f"\n–í —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª–µ: {stats['flood_wait']}"

        await message.reply(message_text)

    except Exception as e:
        logger.error(
            f"Error in cmd_list_accounts: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply(ERROR_MSG)


@app.on_message(command(["account_check", "check"]))
@admin
@with_queries(AccountQueries)
async def cmd_check_account(
    client: Client, message: PyrogramMessage, queries: AccountQueries
):
    """Check specific account status."""
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.reply(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /account_check phone\n"
                "–ü—Ä–∏–º–µ—Ä: /account_check 79001234567"
            )
            return

        phone = _normalize_phone(args[1])

        # Get account
        account = await queries.get_account_by_phone(phone)
        if not account:
            await message.reply("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # Check status
        monitor = AccountMonitor()
        if await monitor.check_account(account):
            await message.reply(
                f"–ê–∫–∫–∞—É–Ω—Ç {phone} –≤ –ø–æ—Ä—è–¥–∫–µ.\n"
                f"–°—Ç–∞—Ç—É—Å: {account.status.value}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {account.last_used_at}"
            )
        else:
            await message.reply(
                f"–ê–∫–∫–∞—É–Ω—Ç {phone} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                f"–°—Ç–∞—Ç—É—Å: {account.status.value}"
                + (" (flood wait)" if account.is_flood_wait else "")
            )

    except Exception as e:
        logger.error(
            f"Error in cmd_check_account: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply(ERROR_MSG)


@app.on_message(command(["account_checkall", "checkall"]))
@admin
async def cmd_check_all_accounts(client: Client, message: PyrogramMessage):
    """Check status of all accounts."""
    try:
        monitor = AccountMonitor()
        stats = await monitor.check_accounts()

        if not stats:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã.")
            return

        # Prepare report
        report = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
        report += f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {stats['total']}\n"
        report += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}\n"
        report += f"–û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {stats['disabled']}\n"
        report += f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['blocked']}\n"
        report += f"–í —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª–µ: {stats['flood_wait']}"

        await message.reply(report)

    except Exception as e:
        logger.error(
            f"Error in cmd_check_all_accounts: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply(ERROR_MSG)


@app.on_message(command(["account_resend", "resend"]))
@admin
async def cmd_resend_code(client: Client, message: PyrogramMessage):
    """Resend authorization code for account."""
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.reply(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /account_resend phone\n"
                "–ü—Ä–∏–º–µ—Ä: /account_resend 79001234567"
            )
            return

        phone = _normalize_phone(args[1])

        # Request code
        manager = AccountManager()
        if await manager.request_code(phone):
            await message.reply(
                "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:\n"
                f"/account_auth {phone} –∫–æ–¥"
            )
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ.")

    except Exception as e:
        logger.error(
            f"Error in cmd_resend_code: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply(ERROR_MSG)


# Dialog Management Commands
@app.on_message(command(["dialog_export", "export"]))
@admin
async def cmd_export_dialog(client: Client, message: PyrogramMessage):
    """Export specific dialog history."""
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.reply(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /dialog_export username\n"
                "–ü—Ä–∏–º–µ—Ä: /dialog_export @username"
            )
            return

        username = args[1].replace("@", "")

        # Export dialog
        file_path = await export_dialog(username)
        if not file_path:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥.")
            return

        # Send file
        await message.reply_document(
            document=file_path,
            caption=f"–≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–ª–æ–≥–∞ —Å {username}",
        )

    except Exception as e:
        logger.error(
            f"Error in cmd_export_dialog: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply(ERROR_MSG)


@app.on_message(command(["dialog_exportall", "exportall"]))
@admin
async def cmd_export_all_dialogs(client: Client, message: PyrogramMessage):
    """Export all dialog histories."""
    try:
        # Export dialogs
        file_path = await export_all_dialogs()
        if not file_path:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥–∏.")
            return

        # Send file
        await message.reply_document(
            document=file_path,
            caption="–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤",
        )

    except Exception as e:
        logger.error(
            f"Error in cmd_export_all_dialogs: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply(ERROR_MSG)


# User Commands
@app.on_message(command(["dialog_start", "start_chat"]))
@admin
async def cmd_start_dialog(client: Client, message: PyrogramMessage):
    """Handle dialog start command."""
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.reply(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /dialog_start username\n"
                "–ü—Ä–∏–º–µ—Ä: /dialog_start @username"
            )
            return

        username = args[1].replace("@", "")

        # Get available account
        manager = AccountManager()
        account = await manager.get_available_account()

        if not account:
            await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return

        # Create dialog
        async with get_db() as session:
            queries = DialogQueries(session)
            dialog = await queries.create_dialog(username, account.id)

            if not dialog:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥.")
                return

            await message.reply(
                f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å {username}\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç: {account.phone}"
            )

    except Exception as e:
        logger.error(
            f"Error in cmd_start_dialog: {e}",
            exc_info=True,
            extra={"user_id": message.from_user.id, "command": message.text},
        )
        await message.reply(ERROR_MSG)


@app.on_message(command(["help", "?"]))
@admin
async def cmd_help(client: Client, message: PyrogramMessage):
    """Show help message with available commands."""
    help_text = """
ü§ñ *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*

üì± *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:*
/account_add (–∏–ª–∏ /addacc) - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
/account_auth (–∏–ª–∏ /auth) - –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/account_list (–∏–ª–∏ /accounts) - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
/account_check (–∏–ª–∏ /check) - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
/account_checkall (–∏–ª–∏ /checkall) - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
/account_resend (–∏–ª–∏ /resend) - –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥

üí¨ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞–º–∏:*
/dialog_start (–∏–ª–∏ /start_chat) - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
/dialog_export (–∏–ª–∏ /export) - –≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–ª–æ–≥–∞
/dialog_exportall (–∏–ª–∏ /exportall) - –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤

‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
"""
    await message.reply(help_text, parse_mode="markdown")
