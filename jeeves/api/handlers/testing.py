"""Testing command handlers."""

import logging
from typing import Dict, List

from core.messaging import DialogConductorFactory, DialogStrategyType
from core.messaging.enums import DialogStatus
from core.telegram import create_forum_topic, forward_messages_to_topic
from core.telegram.client import app
from infrastructure.config import ANALYSIS_GROUP
from pyrogram import Client, filters
from pyrogram.types import Message

logger = logging.getLogger(__name__)

# Store active test dialogs
test_dialogs: Dict[int, DialogConductorFactory] = {}
# Store dialog messages for analysis
dialog_messages: Dict[int, List[Message]] = {}

# Status and tag mappings
STATUS_TO_TAG = {
    DialogStatus.active: "#—É—Ç–æ—á–Ω–µ–Ω–∏–µ",  # Dialog is still active
    DialogStatus.success: "#—É—Å–ø–µ—Ö",  # Successful outcome
    DialogStatus.blocked: "#–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª",  # Blocked
    DialogStatus.rejected: "#–æ—Ç–∫–∞–∑",  # Explicit rejection
    DialogStatus.not_qualified: "#–Ω–µ–ø–æ–¥—Ö–æ–¥–∏—Ç",  # Not qualified
    DialogStatus.expired: "#–∏—Å—Ç–µ–∫",  # No response/dead
    DialogStatus.stopped: "#–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",  # Manually stopped
}

TAG_DESCRIPTIONS = {
    "#—É—Ç–æ—á–Ω–µ–Ω–∏–µ": "–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π",
    "#—É—Å–ø–µ—Ö": "–£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–ª–æ–≥–∞",
    "#–Ω–µ–ø–æ–¥—Ö–æ–¥–∏—Ç": "–ö–ª–∏–µ–Ω—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º",
    "#–æ—Ç–∫–∞–∑": "–û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
    "#—Ç–µ—Å—Ç": "–¢–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –æ—Ç–¥–µ–ª–æ–º –ø—Ä–æ–¥–∞–∂",
    "#–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª": "–ö–ª–∏–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞",
    "#–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω": "–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /stop",
    "#–∏—Å—Ç–µ–∫": "–î–∏–∞–ª–æ–≥ –∏—Å—Ç–µ–∫ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞",
}


# Command handlers
@app.on_message(filters.command("test_dialog") & ~filters.private)
async def private_chat_filter(message):
    """Handle test_dialog command in non-private chats."""
    await message.reply(
        "‚ö†Ô∏è –ß—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º @ai_sales_bot\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /test_dialog"
    )


@app.on_message(filters.command("test_dialog") & filters.private)
async def cmd_test_dialog(client: Client, message: Message):
    """Test dialog with sales bot."""
    user_id = message.from_user.id

    if user_id in test_dialogs:
        await message.reply(
            "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        )
        return

    async def send_message(text: str) -> None:
        sent_msg = await message.reply(text)
        if user_id in dialog_messages:
            dialog_messages[user_id].append(sent_msg)

    try:
        conductor = DialogConductorFactory.create_conductor(
            strategy_type=DialogStrategyType.COLD_MEETING,
            send_func=send_message,
            telegram_id=user_id,
        )
        test_dialogs[user_id] = conductor
        dialog_messages[user_id] = [message]

        await conductor.start_dialog()
        logger.info(f"Started test dialog for user {user_id}")

    except Exception:
        await handle_error(
            message, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", user_id
        )


@app.on_message(filters.command("stop") & filters.private)
async def cmd_stop_dialog(client: Client, message: Message):
    """Stop active test dialog."""
    user_id = message.from_user.id

    if user_id not in test_dialogs:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.")
        return

    try:
        conductor = test_dialogs[user_id]
        conductor.set_status(DialogStatus.stopped)  # Set status to stopped
        thread_link = await forward_dialog_for_analysis(client, user_id)
        await cleanup_dialog(user_id)
        await send_completion_message(message, thread_link, stopped=True)

    except Exception:
        await handle_error(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∏–∞–ª–æ–≥–∞.", user_id)


@app.on_message(~filters.command("test_dialog") & filters.private)
async def on_test_message(client: Client, message: Message):
    """Handle messages in test dialog."""
    user_id = message.from_user.id

    # Ignore messages from the bot itself
    if message.from_user.is_bot:
        return

    if user_id not in test_dialogs:
        if not message.text.startswith("/"):
            await message.reply(
                "–¢–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test_dialog —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π."
            )
        return

    try:
        if user_id in dialog_messages:
            dialog_messages[user_id].append(message)

        conductor = test_dialogs[user_id]
        is_completed, error = await conductor.handle_message(message.text)

        if error:
            await handle_error(
                message,
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {error}\n–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.",
                user_id,
            )
            return

        if not is_completed:
            return

        thread_link = await forward_dialog_for_analysis(client, user_id)
        await cleanup_dialog(user_id)
        await send_completion_message(message, thread_link)

    except Exception:
        await handle_error(
            message,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.",
            user_id,
        )


# Dialog management functions
async def cleanup_dialog(user_id: int):
    """Clean up dialog data for user."""
    if user_id in test_dialogs:
        del test_dialogs[user_id]
    if user_id in dialog_messages:
        del dialog_messages[user_id]


async def handle_error(message: Message, error: str, user_id: int):
    """Handle error and cleanup dialog."""
    logger.error(f"Error: {error}", exc_info=True)
    await cleanup_dialog(user_id)
    await message.reply(f"‚ö†Ô∏è {error}")


async def send_completion_message(
    message: Message, thread_link: str, stopped: bool = False
):
    """Send completion message with thread link and feedback instructions."""
    action = "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if stopped else "–∑–∞–≤–µ—Ä—à–µ–Ω"
    await message.reply(
        f"–î–∏–∞–ª–æ–≥ {action} –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω –≤ –≥—Ä—É–ø–ø—É –∞–Ω–∞–ª–∏–∑–∞ {ANALYSIS_GROUP}.\n"
        f"–í–æ—Ç —Å—Å—ã–ª–∫–∞: {thread_link}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞, –¥–∞–≤ –≤–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\n"
    )


async def create_thread_message(
    client: Client,
    group_id: int,
    topic_id: int,
    messages: List[Message],
    status: DialogStatus,
) -> Message:
    """Create initial thread message with dialog info."""
    result_tag = STATUS_TO_TAG.get(status, "#—Ç–µ—Å—Ç")
    tag_description = TAG_DESCRIPTIONS.get(result_tag, "")

    return await client.send_message(
        chat_id=group_id,
        reply_to_message_id=topic_id,
        text=f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ª–æ–≥–µ:\n"
        f"- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–ª: {messages[0].from_user.first_name} "
        f"(@{messages[0].from_user.username})\n"
        f"- –î–∞—Ç–∞: {messages[0].date.strftime('%Y-%m-%d')}\n"
        f"- –ò—Ç–æ–≥: {result_tag} - {tag_description}\n\n"
        "–î–∞–≤–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –Ω–µ–≥–æ, "
        "–∏–ª–∏ –Ω–∞ –≤–µ—Å—å –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç—É —Ç–µ–º—É.",
    )


# Forum topic management functions
async def forward_dialog_for_analysis(client: Client, user_id: int) -> str:
    """Forward dialog to testing group for analysis."""
    try:
        if user_id not in dialog_messages or user_id not in test_dialogs:
            logger.error(f"No messages or dialog found for user {user_id}")
            return ""

        messages = dialog_messages[user_id]
        conductor = test_dialogs[user_id]

        if not messages:
            logger.error("Empty messages list")
            return ""

        group = await client.get_chat(ANALYSIS_GROUP)
        if not group or not group.id:
            logger.error("Failed to get testing group info")
            return ""

        title = f"–î–∏–∞–ª–æ–≥ —Å {messages[0].from_user.first_name}"
        topic_id = await create_forum_topic(client, group.id, title)
        if not topic_id:
            return ""

        thread_msg = await create_thread_message(
            client, group.id, topic_id, messages, conductor.get_current_status()
        )

        await forward_messages_to_topic(client, messages, group.id, topic_id)

        thread_link = f"https://t.me/c/{str(group.id)[4:]}/{topic_id}/{thread_msg.id}"
        logger.info(f"Generated thread link: {thread_link}")
        return thread_link

    except Exception as e:
        logger.error(f"Error forwarding dialog: {e}", exc_info=True)
        return ""
