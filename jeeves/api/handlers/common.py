"""Common utilities and constants for command handlers."""

import logging
from functools import wraps
from typing import Callable, TypeVar

from core.telegram.client import app
from infrastructure.config import (
    ACCESS_DENIED_MSG,
    ADMIN_TELEGRAM_ID,
    TESTER_TELEGRAM_IDS,
)
from pyrogram import Client, filters
from pyrogram.types import Message

logger = logging.getLogger(__name__)

# Constants
STATUS_EMOJIS = {
    "active": "‚úÖ",
    "disabled": "üî¥",
    "blocked": "‚õî",
    "unknown": "‚ùì",
    "new": "üÜï",
    "code_requested": "üì±",
    "password_requested": "üîë",
    "warming": "üî•",
}

T = TypeVar("T")


def admin(func: Callable[..., T]) -> Callable[..., T]:
    """Admin-only command decorator."""

    @wraps(func)
    async def wrapper(client: Client, message: Message, *args, **kwargs) -> T:
        if message.from_user.id != ADMIN_TELEGRAM_ID:
            await message.reply(ACCESS_DENIED_MSG)
            return
        return await func(client, message, *args, **kwargs)

    return wrapper


def tester(func: Callable[..., T]) -> Callable[..., T]:
    """Tester command decorator. Allows both admin and testers to use the command."""

    @wraps(func)
    async def wrapper(client: Client, message: Message, *args, **kwargs) -> T:
        user_id = message.from_user.id
        if user_id != ADMIN_TELEGRAM_ID and user_id not in TESTER_TELEGRAM_IDS:
            await message.reply(ACCESS_DENIED_MSG)
            return
        return await func(client, message, *args, **kwargs)

    return wrapper


@app.on_message(filters.command("help"))
async def cmd_help(client: Client, message: Message):
    """Show help message with available commands."""
    help_text = """
*–ë–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–æ–ª–æ–¥–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/test_dialog - –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ:
- –û—Ü–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ üëç/üëé
- –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
- –ó–∞–ø–∏—Å–∞—Ç—å –æ–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º)
"""
    await message.reply(help_text)


@app.on_message(filters.command("start"))
async def cmd_start(client: Client, message: Message):
    """Welcome message for new users."""
    welcome_text = """
üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–æ–ª–æ–¥–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ "–û—Ç–∫—Ä—ã—Ç—ã–π –¥–µ–≤–µ–ª–æ–ø–º–µ–Ω—Ç".

üéØ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test_dialog —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
2. –Ø –±—É–¥—É –∏–≥—Ä–∞—Ç—å —Ä–æ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
3. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
4. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–æ

‚ú® –í–∞—à–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Å–∫—Ä–∏–ø—Ç—ã –ø—Ä–æ–¥–∞–∂ –∏ —Å–¥–µ–ª–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º.

üöÄ –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test_dialog!

‚ÑπÔ∏è –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help
"""
    await message.reply(welcome_text)
